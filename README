

Text Document Explanations
*** Only look at the text documents described here.  All other documents contain information that probably isn’t important to future development.  ***

known_codes.txt
This file contains all currently known codes along with all the descriptions of the codes.  This document also contains labels for proprietary codes even though the codes are not known.  

*** Only change the contents of this file if more codes are known ***

Examples:
Known code: 0C78 Electronic Engine Controller 16  
Labeled Proprietary code: FFFF Proprietary B THIS IS WHAT YOU WANT TO DECODE  

turnWarning

The contents of turn warning are that of a candump stream.  The candump tool (look at documentation of can-utils for further explanation of this tool) was run with its standard out pointed at a file.  While the stream was being taken from the tractor, the turn warning was turned on.  We were hoping to discover the turn warning code from this stream, however after repetitive and labeled codes were filtered out, no code sent back to the tractor would turn on the blinker. 
 twControl

The contents of this document are that of a candump stream(look at documentation of can-utils for further explanation of this tool).  This file contains the stream of data taken from the tractor with nothing happening to it(meaning the tractor is on, but we are not touching it).  It was taken to match against the turnWarning file in the hopes that there would be a few differing codes which would show us what code the turn signal is.  This was not the case.

twControl2

Same as twControl, just done again.  This was done again so two control files could be matched up against each other to see how different they are.  It was seen that the streams have a lot of similar codes, but there were still some differences.  This led us to believe that we’d have to take many control and test samples for comparisons.

Note:  Other ideas the team has tried include but not limited to:
creating filter files with multiple control out streams combined
creating filter files for pgn, priority, destination, source, data, etc with control files
Grouping pgn, priority, destination, source, data, etc


Scripting Documentation

*** Disclaimer! I do not recommend using my scripts.  The reason being is that I did not design for these scripts to be used as tooling.  The purpose was to play with the tractor code stream, and see if I could find any reasonable pattern or groupings.  I recommend that future developers either copy pieces of my code and write their own tools, or look at what is written for ideas on what could be done next. DO NOT LOOK AT SCRIPTS I DON’T INCLUDE HERE!  They could be half finished, or we decided to take different directions many times during the project and they might not have something to do with the current direction of the project***

capstone_cansniffer.py

	Usage: python3 capstone_cansniffer.py -h
	
	Description:
I started writing this as a tool, but then decided against it as I wanted to keep everything used either as well documented open source tools, or as small code snippets that are written by a team.  Running the command above in the usage should tell you everything needed to know about how to use the script.  However, to sum it up its functionalities are below:
Parsing by priority and filtering codes out with lower priorities
Filtering by the amount of times (code data) appears
Checks to similarities between two files data based on code data


code_frequency_counter.py

	Usage: python3 code_frequency_counter.py <filename>

	Description:
This script, contradictory to the name, just outputs to the screen a list of all the pgn codes with duplicates taken out.  I recommend pointing stdout to a file when running.

map_known_codes.py

Usage candump: candump can0 | python3 map_known_codes.py <file full of known codes 
with their description>
	Usage text file: cat <text file name> | python3 map_known_codes.py <file full of known 
codes with their description>

	Description:
This script is used to map all the already known PGN codes to the candump being streamed by the candump tool.  It maps by pgn number.  If someone were to run this against a text file instead of candump I recommend you remove all duplicate codes first, then map the known codes.

source_and_dest_sort.py

	Usage: python3 source_and_dest_sort.py <file of logged codes file>

	Description:
This script takes in a log file full of a stream of candump codes.  It takes all the codes in the file, and sorts them by their source and destination numbers.

*** Note: other scripts were written, but they didn’t lead to any new discoveries.  They are being left out so that the next work group can decide what they want to test and what patterns they want to look for ***



All of these scripts have to do with sending data back
to the tractor, or parsing the codes the in the tractor


This is for a capstone project where my team was 
working with iFixit to translate John Deere's proprietary codes
into error codes that the average farmer could read.

The parsing of these codes has to do with grouping so that 
we can try decode John Deere's codes

FUTURE GROUPS DEVELOPING, INFO BELOW
-------------------------------------------------------------------
***OUR GROUP USED OPEN SOURCE CAN_UTILS WHICH IS WAY EASER, AND WE RECOMMEND***

IF YOU WANT TO SETUP POLYCAN INSTEAD, HERE ARE THE DIRECTIONS


          *******************************************************************************
          *																				*
		  *  This is a tutorial for setting up and running Polycan on Ubuntu OS 19.10.  *
		  *      If you have questions feel free to email me at avuong04@calpoly.edu    *
		  *									 											*
		  *  The Polycan Github instructions were a good template for setting up. A few *
          *   minor changes are needed to make the setup smoother. Here are the steps.  *
		  * 																			*
          *******************************************************************************

1) Make sure to install vim on your Ubuntu OS. Step by step instructions:

 	a) Open terminal from your "Show Applications" located in bottom left corner
	b) Type this into command line: sudo apt install --assume-yes vim
           *Should not take longer than a minute

2) Make sure to install git on your Ubuntu OS. Step by step instructions:
	
        a) If not already, open up your terminal
	b) Type this into command line: sudo apt-get install git
	   *Installation begins and should finish within 10 minutes
        c) Change your directory to where you want to save the Polycan program
           *For example cd /home/anthony/Documents/Capstone/iFixitSoftware
 	d) Now we want to configure your username and email.
           Have a github account setup prior to the steps below. Replace email_id and user_name with your info
           i) Type this into command line: git config --global user.name "user_name"
           ii) Then type this into command line: git config --global user.email "email_id"
        e) Everything should be good to go! 

3) Make sure to have pip3 installed on your Ubuntu OS. If you don't have it please install. Steps to install pip3:

	a) If not already, open terminal from your "Show Applications"
 	b) Type this into command line: sudo apt install python3-pip
	c) The downloader will ask for permission to download. Type "y" and
           then enter.
        d) Download and installation should finish within a minute.

4) Next you should install the Polycan program. Steps to install Polycan:

	a) Type this into command line: sudo pip3 install git+https://github.com/TractorHacking/polycan
        b) The download should be quick here. 

5) After you've installed the Polycan device, an update is needed. Do the following:

	a) Type this into command line: sudo pip3 install git+https://github.com/TractorHacking/polycan --upgrade
 	b) This is a quickie as well. ;)

6) After steps 2 and 3 are completed, Polycan files should be full copied over to your working directory. However
   the program environment needs to be configured. Follow these steps:

	a) For this, make sure you are in your remote git branch and have a repository created. 
  	   Type this into command line: git clone https://github.com/TractorHacking/polycan
        b) Final step is to install the path environment commands to the path.
           Type the following: sudo pip3 install -e git+https://github.com/TractorHacking/polycan#egg=polycan

7) Polycan should be able to run by typing this into the command line when you are outside the polycan folder directory:   Type this to run: polycan

8) With Polycan set up and ready to run, you want to change how the program connects with the CANNABLE Board. Do the following:

	a) Change directory to Polycan, then change directory into CANNABLE. lol
	b) Now there is a bash script called bringUp.py. Edit that script with vim. 
		i) Type this into command line: vim bringUp.py
		ii) For the lines starting with "ip", you want to add "sudo" before it. This is Ubuntu's equivalent of "run" in Windows.
		    Also, change "ifconfig" to "ip -a" or just copy and past below to the script:
		    
		    #!/bin/bash

		    sudo ip link set up can0
		    sudo ip link set can0 type can bitrate 250000
		    ip -a | grep "can0"
	c) Now you can run this script by doing this:
	 	i) chmod +x bringUP
		ii) ./bringUP
	d) The CANNABLE is now coonected to the program - indication both gree and red light are not lit.

9) Finally the program is ready to go! Enjoy!

